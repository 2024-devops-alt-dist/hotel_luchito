// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id_user        Int             @id @default(autoincrement()) @map("id_user")
  nom            String?         @map("nom")
  prenom         String?         @map("prenom")
  rol            String?         @map("rol")
  email          String?         @map("email")
  mot_de_passe   String?         @map("mot_de_passe")
  etablissements Etablissement[]
  contacts       Contact[]
  reservations   Reservation[]

  @@map("USERS")
}

model Etablissement {
  id_etablissement Int       @id @default(autoincrement()) @map("id_etablissement")
  nom              String?   @map("nom")
  adresse          String?   @map("adresse")
  ville            String?   @map("ville")
  description      String?   @map("description")
  users_id_user    Int       @map("USERS_id_user")
  user             User      @relation(fields: [users_id_user], references: [id_user])
  suites           Suite[]
  contacts         Contact[]

  @@map("ETABLISSEMENTS")
}

model Suite {
  id_suite         Int           @id @default(autoincrement()) @map("id_suite")
  nom              String?       @map("nom")
  img              String?       @map("img")
  description      String?       @map("description")
  prix             Decimal?      @map("prix")
  img_galery       Json?         @map("img_galery")
  id_etablissement Int           @map("id_etablissement")
  etablissement    Etablissement @relation(fields: [id_etablissement], references: [id_etablissement])
  reservations     Reservation[]

  @@map("SUITES")
}

model Contact {
  id_contact       Int           @id @default(autoincrement()) @map("id_contact")
  sujet            String?       @map("sujet")
  message          String        @map("message")
  email            String?       @map("email")
  date_contact     DateTime      @default(now()) @map("date_contact")
  id_user          Int           @map("id_user")
  user             User          @relation(fields: [id_user], references: [id_user])
  id_etablissement Int           @map("id_etablissement")
  etablissement    Etablissement @relation(fields: [id_etablissement], references: [id_etablissement])

  @@map("CONTACTS")
}

model Reservation {
  users_id_user   Int                @map("USERS_id_user")
  suites_id_suite Int                @map("SUITES_id_suite")
  date_debut      DateTime?          @map("date_debut")
  date_fin        DateTime?          @map("date_fin")
  statut          ReservationStatut? @map("statut")
  date_creation   DateTime?          @map("date_creation")

  user  User  @relation(fields: [users_id_user], references: [id_user])
  suite Suite @relation(fields: [suites_id_suite], references: [id_suite])

  @@id([users_id_user, suites_id_suite])
  @@map("RESERVATIONS")
}

enum ReservationStatut {
  confirmee
  anulee
}
