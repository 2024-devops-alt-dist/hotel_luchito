// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id_user      Int           @id @default(autoincrement()) @map("id_user")
  name         String?       @map("name")
  surname      String?       @map("surname")
  rol          String?       @map("rol")
  email        String?       @map("email")
  password     String?       @map("password")
  hotels       Hotel[]
  contacts     Contact[]
  reservations Reservation[]

  @@map("USERS")
}

model Hotel {
  id_hotel    Int       @id @default(autoincrement()) @map("id_hotel")
  name        String?   @map("name")
  adresse     String?   @map("adresse")
  city        String?   @map("city")
  description String?   @map("description")
  id_user     Int       @map("id_user")
  user        User      @relation(fields: [id_user], references: [id_user])
  rooms       Room[]
  contacts    Contact[]

  @@map("HOTELS")
}

model Room {
  id_room      Int           @id @default(autoincrement()) @map("id_room")
  name         String?       @map("name")
  img          String?       @map("img")
  description  String?       @map("description")
  price        Decimal?      @map("price")
  img_galery   Json?         @map("img_galery")
  id_hotel     Int           @map("id_hotel")
  hotel        Hotel         @relation(fields: [id_hotel], references: [id_hotel])
  reservations Reservation[]

  @@map("ROOMS")
}

model Contact {
  id_contact   Int      @id @default(autoincrement()) @map("id_contact")
  sujet        String?  @map("sujet")
  message      String   @map("message")
  email        String?  @map("email")
  contact_date DateTime @default(now()) @map("contact_date")
  id_user      Int      @map("id_user")
  user         User     @relation(fields: [id_user], references: [id_user])
  id_hotel     Int      @map("id_hotel")
  hotel        Hotel    @relation(fields: [id_hotel], references: [id_hotel])

  @@map("CONTACTS")
}

model Reservation {
  id_user       Int                @map("id_user")
  id_room       Int                @map("id_room")
  starting_date DateTime?          @map("starting_date")
  finish_date   DateTime?          @map("finish_date")
  status        ReservationStatut? @map("status")
  creation_date DateTime?          @map("creation_date")

  user User @relation(fields: [id_user], references: [id_user])
  room Room @relation(fields: [id_room], references: [id_room])

  @@id([id_user, id_room])
  @@map("RESERVATIONS")
}

enum ReservationStatut {
  confirmed
  cancelled
}
